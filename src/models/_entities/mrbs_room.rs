//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "mrbs_room")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub disabled: i8,
    pub area_id: i32,
    pub room_name: String,
    pub sort_key: String,
    pub description: Option<String>,
    pub capacity: i32,
    #[sea_orm(column_type = "Text", nullable)]
    pub room_admin_email: Option<String>,
    pub invalid_types: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub custom_html: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::mrbs_area::Entity",
        from = "Column::AreaId",
        to = "super::mrbs_area::Column::Id",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    MrbsArea,
    #[sea_orm(has_many = "super::mrbs_entry::Entity")]
    MrbsEntry,
    #[sea_orm(has_many = "super::mrbs_repeat::Entity")]
    MrbsRepeat,
}

impl Related<super::mrbs_area::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MrbsArea.def()
    }
}

impl Related<super::mrbs_entry::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MrbsEntry.def()
    }
}

impl Related<super::mrbs_repeat::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MrbsRepeat.def()
    }
}
