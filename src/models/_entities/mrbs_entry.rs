//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "mrbs_entry")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub start_time: i32,
    pub end_time: i32,
    pub entry_type: i32,
    pub repeat_id: Option<i32>,
    pub room_id: i32,
    pub timestamp: Option<DateTimeUtc>,
    pub create_by: String,
    pub modified_by: String,
    pub name: String,
    pub r#type: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub status: u8,
    pub reminded: Option<i32>,
    pub info_time: Option<i32>,
    pub info_user: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub info_text: Option<String>,
    pub ical_uid: String,
    pub ical_sequence: i16,
    pub ical_recur_id: Option<String>,
    pub allow_registration: i8,
    pub registrant_limit: i32,
    pub registrant_limit_enabled: i8,
    pub registration_opens: i32,
    pub registration_opens_enabled: i8,
    pub registration_closes: i32,
    pub registration_closes_enabled: i8,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::mrbs_participants::Entity")]
    MrbsParticipants,
    #[sea_orm(
        belongs_to = "super::mrbs_repeat::Entity",
        from = "Column::RepeatId",
        to = "super::mrbs_repeat::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    MrbsRepeat,
    #[sea_orm(
        belongs_to = "super::mrbs_room::Entity",
        from = "Column::RoomId",
        to = "super::mrbs_room::Column::Id",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    MrbsRoom,
}

impl Related<super::mrbs_participants::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MrbsParticipants.def()
    }
}

impl Related<super::mrbs_repeat::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MrbsRepeat.def()
    }
}

impl Related<super::mrbs_room::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MrbsRoom.def()
    }
}
